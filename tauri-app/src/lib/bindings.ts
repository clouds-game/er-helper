
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/


export const commands = {
async getMetadata() : Promise<Metadata> {
    return await TAURI_INVOKE("get_metadata");
},
async getBasicInfo(selected: number | null) : Promise<BasicInfo> {
    return await TAURI_INVOKE("get_basic_info", { selected });
},
async getEquippedInfo() : Promise<EquippedInfos> {
    return await TAURI_INVOKE("get_equipped_info");
},
async getEventsInfo() : Promise<EventInfos> {
    return await TAURI_INVOKE("get_events_info");
},
async getIcons(iconIds: number[]) : Promise<string[]> {
    return await TAURI_INVOKE("get_icons", { iconIds });
}
}

/** user-defined events **/



/** user-defined constants **/



/** user-defined types **/

export type BasicInfo = { steam_id: string; role_name: string; duration: number; level: number; rune: number; boss: number; grace: number; death: number; attrs: [number, number, number, number, number, number, number, number]; hp: [number, number, number]; fp: [number, number, number]; sp: [number, number, number] }
export type EquippedInfos = { lefthand: WeaponInfo[]; righthand: WeaponInfo[]; arrows: WeaponInfo[]; bolts: WeaponInfo[]; magics: SpellInfo[] }
export type EventInfos = { boss: number[]; grace: number[] }
export type Metadata = { exists: boolean; last_modified: number; size: number }
export type SpellInfo = { id: number }
export type WeaponInfo = { id: number; level: number }

/** tauri-specta globals **/

import {
	invoke as TAURI_INVOKE,
	Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
	listen: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
	once: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
	emit: null extends T
		? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
		: (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
	| { status: "ok"; data: T }
	| { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
	mappings: Record<keyof T, string>,
) {
	return new Proxy(
		{} as unknown as {
			[K in keyof T]: __EventObj__<T[K]> & {
				(handle: __WebviewWindow__): __EventObj__<T[K]>;
			};
		},
		{
			get: (_, event) => {
				const name = mappings[event as keyof T];

				return new Proxy((() => {}) as any, {
					apply: (_, __, [window]: [__WebviewWindow__]) => ({
						listen: (arg: any) => window.listen(name, arg),
						once: (arg: any) => window.once(name, arg),
						emit: (arg: any) => window.emit(name, arg),
					}),
					get: (_, command: keyof __EventObj__<any>) => {
						switch (command) {
							case "listen":
								return (arg: any) => TAURI_API_EVENT.listen(name, arg);
							case "once":
								return (arg: any) => TAURI_API_EVENT.once(name, arg);
							case "emit":
								return (arg: any) => TAURI_API_EVENT.emit(name, arg);
						}
					},
				});
			},
		},
	);
}
